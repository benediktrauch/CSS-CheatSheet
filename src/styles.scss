// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
@import '~prismjs/themes/prism-okaidia.css';

$CSSCheatSheet-primary: mat-palette($mat-green, 500);
$CSSCheatSheet-accent: mat-palette($mat-pink, A200, A100, A400);
$CSSCheatSheet-dark-normal: mat-color($mat-blue-grey, 900);
$CSSCheatSheet-dark-lighter: #4f5b62;
$CSSCheatSheet-dark-darker: #000a12;
$CSSCheatSheet-primaryColor: mat-color($mat-green, 500);

@import "~@material/animation/functions";
@import "~@material/animation/variables";
@import "~@material/floating-label/dist/mdc.floating-label.css";
//@import "~@material/floating-label/mdc-floating-label";
@import "~@material/form-field/dist/mdc.form-field.css";
@import "~@material/button/dist/mdc.button.css";
//@import "~@material/button/mdc-button";
@import "~@material/textfield/dist/mdc.textfield.css";
@import "~@material/icon-button/dist/mdc.icon-button.css";
//@import "~@material/icon-button/mdc-icon-button";
@import "~@material/elevation/dist/mdc.elevation.css";
@import "~@material/switch/dist/mdc.switch.css";

//@import '~@material/textfield/mdc-text-field';

//@import '~prismjs/themes/prism-coy.css';
//@import '~prismjs/themes/prism-dark.css';
//@import '~prismjs/themes/prism-funky.css';
//@import '~prismjs/themes/prism-solarizedlight.css';
//@import '~prismjs/themes/prism-tomorrow.css';
//@import '~prismjs/themes/prism-twilight.css';
//@import '~prismjs/themes/prism.css';

// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/


$mdd-surface: #121212;

// The warn palette is optional (defaults to red).
$CSSCheatSheet-warn: mat-palette($mat-red);

$mat-dark-theme-background: (
  status-bar: #121212,
  app-bar: map_get($mat-grey, 900),
  background: #121212,
  hover: rgba(white, 0.04),
  card: map_get($mat-grey, 800),
  dialog: map_get($mat-grey, 800),
  disabled-button: rgba(white, 0.12),
  raised-button: map-get($mat-grey, 800),
  focused-button: $light-focused,
  selected-button: map_get($mat-grey, 900),
  selected-disabled-button: map_get($mat-grey, 800),
  disabled-button-toggle: black,
  unselected-chip: map_get($mat-grey, 700),
  disabled-list-option: black,
);

@function my-mat-dark-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: true,
    foreground: $mat-dark-theme-foreground,
    background: $mat-dark-theme-background,
  );
}

// Create the theme object (a Sass map containing all of the palettes).
$CSSCheatSheet-theme: my-mat-dark-theme($CSSCheatSheet-primary, $CSSCheatSheet-accent, $CSSCheatSheet-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($CSSCheatSheet-theme);

/* You can add global styles to this file, and also import other style files */


$borderRadius: 24px;
$smallBorderRadius: 8px;

$shadowColor: rgba(0, 0, 0, 0.6);
$boxShadow: 0px 2px 2px 1px $shadowColor;


@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

@mixin elevation() {

}

@function calculateElevation($level) {
  $factor: 0;
  @if ($level >= 10) {
    $factor: 0.16;
  } @else if ($level == 9) {
    $factor: 0.15;
  } @else if ($level == 8) {
    $factor: 0.14;
  } @else if ($level == 7) {
    $factor: 0.12;
  } @else if ($level == 6) {
    $factor: 0.11;
  } @else if ($level == 5) {
    $factor: 0.09;
  } @else if ($level == 4) {
    $factor: 0.08;
  } @else if ($level == 3) {
    $factor: 0.07;
  } @else if ($level == 2) {
    $factor: 0.05;
  } @else {
    $factor: 0;
  }
  $result: rgba(255, 255, 255, $factor);

  @return $result;
}

html, body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  font-weight: lighter;
  max-width: 100vw;
  overflow-y: auto;
  overflow-x: hidden;
  scroll-behavior: smooth;


  background: $mdd-surface;
  color: #FFFFFF;

  .csscslogo {
    .polyline {
      fill: none;
      stroke: $CSSCheatSheet-dark-lighter;
      stroke-width: 1;
      stroke-linecap: round;


      stroke-dasharray: 0;
      stroke-dashoffset: 0;

      &.outline {
        stroke-dasharray: 135;
        stroke-dashoffset: 135;
        animation: dashAnimation 3s linear forwards;
      }

      &.inline {
        stroke-dasharray: 91;
        stroke-dashoffset: 91;
        animation: dashAnimation 2.2s 0.8s linear forwards;
      }

      &.circle {
        stroke-dasharray: 141;
        stroke-dashoffset: 283;
        stroke: $CSSCheatSheet-dark-lighter;
        stroke-opacity: 1;
        //fill: $CSSCheatSheet-dark-normal;
        //fill-opacity: 0;
        //animation: dashAnimation 1.5s 3s linear forwards;
        //animation: dashAnimationCircle 1.5s 3s linear forwards;
      }

      &.background {
        //display: none;
        fill: $CSSCheatSheet-dark-lighter;
        box-shadow: $boxShadow;
      }
    }

    &:hover {
      .polyline {
        stroke-dasharray: 0;
        stroke-dashoffset: 0;
        &.outline {
          //animation: rainbowAnimation 3s linear infinite;
        }

        &.inline {
          //animation: rainbowAnimation 3s linear infinite;
        }

        &.circle {
          //animation: rainbowAnimation 3s linear infinite;
          stroke: $CSSCheatSheet-dark-lighter;
          stroke-opacity: 1;
          animation: pulseAnimation 2s ease-in-out infinite;
        }
      }
    }

    @keyframes dashAnimation {
      to {
        stroke-dashoffset: 0;
        stroke: $CSSCheatSheet-primaryColor;
      }
    }
    @keyframes dashAnimationCircle {
      to {
        stroke-dashoffset: 0;
        fill-opacity: 1;
      }
    }

    @keyframes pulseAnimation {
      30% {
        //stroke: $CSSCheatSheet-dark-darker;
        stroke-opacity: 0;
      }
    }

    @keyframes rainbowAnimation {
      15% {
        stroke: $CSSCheatSheet-primaryColor;
      }
      30% {
        stroke: yellow;
      }
      45% {
        stroke: red;
      }
      60% {
        stroke: blueviolet;
      }
      75% {
        stroke: blue;
      }
      90% {
        stroke: $CSSCheatSheet-primaryColor;
      }
    }
  }

  .mat-raised-button, .mat-stroked-button, .mat-button, .mat-flat-button {
    -webkit-border-radius: $borderRadius;
    -moz-border-radius: $borderRadius;
    border-radius: $borderRadius;
  }

  .container {
    padding: 1em;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
  }

  .mat-tab-header {
    border: none;
  }

  .mat-tab-labels {
    display: flex;
    justify-content: space-evenly;
  }

  .mat-tab-label {
    border-top-left-radius: 24px;
    border-top-right-radius: 24px;
    margin-top: 5px;
    background-color: calculateElevation(6);
    box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);

    .active {
      font-weight: bold;
    }

    .mat-tab-label-content {
      display: flex;
      align-items: center;
      justify-content: space-evenly;
      width: 100%;

      img {
        height: 40px;
      }
    }
  }

  .mat-tab-body {
    max-height: 15em;
    min-height: 15em;
    border-radius: $smallBorderRadius;
    border: 1px solid calculateElevation(4);
    background-color: rgba(0, 0, 0, .25);
  }

  .mat-tab-body-wrapper {
    border-radius: $smallBorderRadius;
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
    background-color: rgba(0, 0, 0, .25);
  }

  :not(pre) > code[class*="language-"], pre[class*="language-"] {
    background-color: $CSSCheatSheet-dark-normal;
  }

  .mat-tab-body-content {
    min-height: 15em;
  }

  :not(pre) > code[class*=language-], pre[class*=language-] {
    background-color: #00000000 !important;
  }

  .darkmodeFab {
    position: fixed;
    bottom: 0;
    right: 0;
    margin: 1em;
    z-index: 3;
  }


  .formFieldNoHint .mat-form-field-wrapper {
    padding-bottom: 0;
  }
}
